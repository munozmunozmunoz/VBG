##Code for R to conduct simulation study – calls the function, sim2fn, which is provided below
##Please note that the computation time is approximately 2-4 hours per simulated dataset for 
##the WinBUGS settings that are provided below.

library("R2WinBUGS")
nsims = 100   #set the number of datasets to simulate

#set up the basic trap array in a 5x5 grid
gridx<-sort(rep(1:5,5))
gridy<-rep(1:5,5)
grid<-as.matrix(cbind(gridx,gridy))

#set the upper and lower x and y coordinates for the state space
xl<- -2
yl<- -2
xu<-8
yu<-8

for(i in 1:nsims){

#simulate data from the function (sim2.fn)
#set the parameters for N individuals, with survival (phi), encounter rate (lam0),  and M
hold<-sim2.fn(N=100,lambda=.7,p0=.05,M=500)   

#Set up a data input for R2WinBUGS 
data1<-list(y=hold$y, M=hold$M, grid=grid, T=3,nreps=5, ntraps=25, xl=xl, yl=yl, xu=xu, yu=yu)

#Set R2WinBUGS to monitor the parameters of interest
params = list('lam0', 'sigma', 'N1', 'N2','N3','R1', 'R2','R3','gamma', 'phi','Nalive')

#Set the initial values
inits =  function() {list(z=hold$z, phi=runif(3,0,1), gamma=runif(3,0,1),
 lam0=runif(1,0,1)) }

###################################################################
#####  WRITE TEXT FILE WITH WinBUGS SPECIFICATION   ###########
###################################################################
cat("
model {
sigma2~dunif(0, 10)        # set priors for sigma2, lam0 (encounter rate), gamma, and phi
lam0 ~ dgamma(.1,.1)        

for(j in 1:T){             # T = 3 years
    gamma[j]~dunif(0, 1)   #recruitment
    phi[j]~dunif(0, 1)     #survival
    }

for (i in 1:M){            #loop over M individuals (includes the augmented data)
     ncaps[i]<-sum(z[i,1:T])
     alive[i]<-1-equals(ncaps[i],0)
     z[i,1]~dbin(gamma[1], 1)

      SX[i]~dunif(xl, xu)  # set priors for the X and Y coordinates of each individual
      SY[i]~dunif(yl, yu)

   for(j in 1:ntraps) {
		D2[i,j] <- pow(SX[i]-grid[j,1], 2) + pow(SY[i]-grid[j,2],2)
        	               g[i,j] <- exp(-D2[i,j]/sigma2)
 
   for(t in 1:T){
    tmp[i,j,t]<- z[i,t]*lam0* g[i,j] *nreps
    y[i,j,t]~ dpois(tmp[i,j,t])
        }
     }
    
a[i,1]<-(1-z[i,1]) 
a[i,2]<-(1-z[i,1])*(1-z[i,2]) 

gammatmp[i,2]<-gamma[2]*a[i,1]
     mu[i,2]<- (phi[2]*z[i,1]) + gammatmp[i,2]
     z[i,2]~dbern(mu[i,2])

R[i,1]<- z[i,1]
R[i,2]<-(1-z[i,1])*z[i,2]
R[i,3]<- (1-z[i,1])*(1-z[i,2])*z[i,3]

 gammatmp[i,3]<-gamma[3]*a[i,2]
     mu[i,3]<- (phi[3]*z[i,2]) + gammatmp[i,3]
     z[i,3]~dbern(mu[i,3])
}

N1<-sum(z[1:M,1])
N2<-sum(z[1:M,2])
N3<-sum(z[1:M,3])
Nalive<-sum(alive[1:M])

R1<-sum(R[1:M,1])
R2<-sum(R[1:M,2])
R3<-sum(R[1:M,3])
}
",file="JSsimMod.txt")
###################################################################
#####  END OF TEXT FILE   #########################################
###################################################################

out = bugs(data1, inits, params, model.file='JSsimMod.txt',
working.directory=getwd(), debug=FALSE, n.chains=3, n.iter=8000, n.burnin=5000, n.thin=2)

dput(out,paste("out",i,".R",sep=""))  #this dumps the output file
}





##sim2.fn - function to simulate data from a Poisson encounter process
##This function is called from the code above and must be run in R first

sim2.fn <-
function(N=100,phi0=.7,lambda=.2,M=500){ # M is total ever alive

ntraps<- 25
nreps<- 5

T<-3 
phi0<- phi0
lambda<-rep(lambda,T)
phi<-rep(phi0,T)
N<-rep(N,T)

# note this is set to calculate gamma for T=3 
g1<- N[1]/M
g2<- (N[2]-phi[1]*N[1])/(M*(1-g1))
g3<- (N[3]-phi[2]*N[2])/(M*(1-g1)*(1-g2))

gamma<-c(g1,g2,g3)

#set up the basic trap array in a 5x5 grid
gridx<-sort(rep(1:5,5))
gridy<-rep(1:5,5)
grid<-cbind(gridx,gridy)

#set the upper and lower x and y coordinates for the state space
xl<- -2
yl<- -2
xu<-8
yu<-8

sx<-runif(M,xl,xu)
sy<-runif(M,yl,yu)
S<-cbind(sx,sy)

e2dist <- function (x, y) 
{   i <- sort(rep(1:nrow(y), nrow(x)))
    dvec <- sqrt((x[, 1] - y[i, 1])^2 + (x[, 2] - y[i, 2])^2)
    matrix(dvec, nrow = nrow(x), ncol = nrow(y), byrow = F)
}

dmat<-e2dist(S,grid)

lam0<- -1*log(1-lambda )  # inverse cloglog of lambda, lambda = per trap enc prob at d=0
                          #detection probability when distance=0 lam0 = enc. rate, 
sigma<- .8
psi<- exp(-(1/(sigma*sigma))*dmat*dmat)
pmat<-lam<-list()
for(i in 1:T){
lam[[i]]<- lam0[i]*psi
pmat[[i]]<- 1- exp(-lam[[i]])
}

pbar<-function(){
gx<-sort(rep(seq(lx,ux,,50),50))
gy<- rep(seq(ly,uy,,50),50)
gg<-cbind(gx,gy)

ddd<- e2dist(gg,grid)
tmp2<- lam0[1]*exp(-(1/(sigma*sigma))*ddd*ddd)
lamtot<-tmp2%*%rep(1,nrow(grid))
tmp3<- 1-exp(-lamtot)
probcap<- 1- dbinom(0,nreps,tmp3)
meanp<-mean(probcap)
meanp
}

meanp<-pbar()
#meanp here is total capture probability for a study based on nreps

z<-r<-matrix(0,nrow=M,ncol=T)
# note 3-d version of "y": "individuals x traps x years"
y<-array(0,dim=c(M,ntraps,T))

r[,1]<-rbinom(M,1,gamma[1])
z[,1]<-r[,1]

for(i in 2:T){
 idx<- 1- apply(matrix(r[,1:(i-1)],nrow=M,byrow=FALSE),1,sum)
 r[,i]<- rbinom(M,idx,gamma[i])
 z[,i]<- rbinom(M,1,z[,i-1]*phi[i]) + r[,i]
}

for(i in 1:M){
for(t in 1:T){
y[i,1:ntraps,t]<-rpois(ntraps,nreps*lam[[t]][i,]*z[i,t] )
}
}
list(y=y,z=z,r=r,M=M,lam0=lam0,gamma=gamma,phi=phi0,N=apply(z,2,sum),sigma=sigma)
}


